@EndUserText.label : 'Travel data'
@AbapCatalog.enhancement.category : #NOT_EXTENSIBLE
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zyny_rap_book_t2 {

  key client            : abap.clnt not null;
  key travel_id         : /dmo/travel_id not null;
  agency_id             : /dmo/agency_id;
  customer_id           : /dmo/customer_id;
  begin_date            : /dmo/begin_date;
  end_date              : /dmo/end_date;
  @Semantics.amount.currencyCode : 'zyny_rap_book_t2.currency_code'
  booking_fee           : /dmo/booking_fee;
  @Semantics.amount.currencyCode : 'zyny_rap_book_t2.currency_code'
  total_price           : /dmo/total_price;
  currency_code         : /dmo/currency_code;
  description           : /dmo/description;
  overall_status        : /dmo/overall_status;
  attachment            : /dmo/attachment;
  mime_type             : /dmo/mime_type;
  file_name             : /dmo/filename;
  created_by            : abp_creation_user;
  created_at            : abp_creation_tstmpl;
  local_last_changed_by : abp_locinst_lastchange_user;
  local_last_changed_at : abp_locinst_lastchange_tstmpl;
  last_changed_at       : abp_lastchange_tstmpl;

}


CLASS zyny_book_data2 DEFINITION
PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_oo_adt_classrun.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zyny_book_data2 IMPLEMENTATION.

  METHOD if_oo_adt_classrun~main.
    DATA:
      group_id   TYPE string VALUE '###',
      attachment TYPE /dmo/attachment,
      file_name  TYPE /dmo/filename,
      mime_type  TYPE /dmo/mime_type.

*   clear data
    DELETE FROM zyny_rap_book_t2.
*    DELETE FROM zrap100_dtrav###.

    "insert travel demo data
    INSERT zyny_rap_book_t2  FROM (
        SELECT
          FROM /dmo/travel AS travel
          FIELDS
            travel~travel_id        AS travel_id,
            travel~agency_id        AS agency_id,
            travel~customer_id      AS customer_id,
            travel~begin_date       AS begin_date,
            travel~end_date         AS end_date,
            travel~booking_fee      AS booking_fee,
            travel~total_price      AS total_price,
            travel~currency_code    AS currency_code,
            travel~description      AS description,
            CASE travel~status    "[N(New) | P(Planned) | B(Booked) | X(Cancelled)]
              WHEN 'N' THEN 'O'
              WHEN 'P' THEN 'O'
              WHEN 'B' THEN 'A'
              ELSE 'X'
            END                     AS overall_status,
            @attachment             AS attachment,
            @mime_type              AS mime_type,
            @file_name              AS file_name,
            travel~createdby        AS created_by,
            travel~createdat        AS created_at,
            travel~lastchangedby    AS last_changed_by,
            travel~lastchangedat    AS last_changed_at,
            travel~lastchangedat    AS local_last_changed_at
            ORDER BY travel_id UP TO 10 ROWS
      ).
    COMMIT WORK.
    out->write( |[RAP100] Demo data generated for table ZRAP100_ATRAV{ group_id }. | ).
  ENDMETHOD.
ENDCLASS.

class ZBP_C_YNY_RAP_BOOK_T2 definition
  public
  abstract
  final
  for behavior of ZC_YNY_RAP_BOOK_T2 .

public section.
protected section.
private section.
ENDCLASS.



CLASS ZBP_C_YNY_RAP_BOOK_T2 IMPLEMENTATION.
ENDCLASS.

class ZBP_R_YNY_RAP_BOOK_T2 definition
  public
  abstract
  final
  for behavior of ZR_YNY_RAP_BOOK_T2 .

public section.
protected section.
private section.
ENDCLASS.



CLASS ZBP_R_YNY_RAP_BOOK_T2 IMPLEMENTATION.
ENDCLASS.

@EndUserText.label : 'Draft Database Table for ZYNY_RAP_BOOK_D'
@AbapCatalog.enhancement.category : #EXTENSIBLE_ANY
@AbapCatalog.tableCategory : #TRANSPARENT
@AbapCatalog.deliveryClass : #A
@AbapCatalog.dataMaintenance : #RESTRICTED
define table zyny_rap_book_d {

  key mandt          : mandt not null;
  key travelid       : /dmo/travel_id not null;
  agencyid           : /dmo/agency_id;
  customerid         : /dmo/customer_id;
  begindate          : /dmo/begin_date;
  enddate            : /dmo/end_date;
  @Semantics.amount.currencyCode : 'zyny_rap_book_d.currencycode'
  bookingfee         : /dmo/booking_fee;
  @Semantics.amount.currencyCode : 'zyny_rap_book_d.currencycode'
  totalprice         : /dmo/total_price;
  currencycode       : /dmo/currency_code;
  description        : /dmo/description;
  overallstatus      : /dmo/overall_status;
  attachment         : /dmo/attachment;
  mimetype           : /dmo/mime_type;
  filename           : /dmo/filename;
  createdby          : abp_creation_user;
  createdat          : abp_creation_tstmpl;
  locallastchangedby : abp_locinst_lastchange_user;
  locallastchangedat : abp_locinst_lastchange_tstmpl;
  lastchangedat      : abp_lastchange_tstmpl;
  "%admin"           : include sych_bdl_draft_admin_inc;

}

@Metadata.layer: #CORE
@UI.headerInfo.title.type: #STANDARD
@UI.headerInfo.title.value: 'TravelId'
@UI.headerInfo.description.type: #STANDARD
@UI.headerInfo.description.value: 'TravelId'
annotate view ZC_YNY_RAP_BOOK_T2 with
{
  @UI.facet: [ {
    label: 'General Information', 
    id: 'GeneralInfo', 
    purpose: #STANDARD, 
    position: 10 , 
    type: #IDENTIFICATION_REFERENCE
  } ]
  @UI.identification: [ {
    position: 10 , 
    label: 'Travel ID'
  } ]
  @UI.lineItem: [ {
    position: 10 , 
    label: 'Travel ID'
  } ]
  @UI.selectionField: [ {
    position: 10 
  } ]
  TravelId;
  
  @UI.identification: [ {
    position: 20 , 
    label: 'Agency ID'
  } ]
  @UI.lineItem: [ {
    position: 20 , 
    label: 'Agency ID'
  } ]
  @UI.selectionField: [ {
    position: 20 
  } ]
  AgencyId;
  
  @UI.identification: [ {
    position: 30 , 
    label: 'Customer ID'
  } ]
  @UI.lineItem: [ {
    position: 30 , 
    label: 'Customer ID'
  } ]
  @UI.selectionField: [ {
    position: 30 
  } ]
  CustomerId;
  
  @UI.identification: [ {
    position: 40 , 
    label: 'Starting Date'
  } ]
  @UI.lineItem: [ {
    position: 40 , 
    label: 'Starting Date'
  } ]
  @UI.selectionField: [ {
    position: 40 
  } ]
  BeginDate;
  
  @UI.identification: [ {
    position: 50 , 
    label: 'End Date'
  } ]
  @UI.lineItem: [ {
    position: 50 , 
    label: 'End Date'
  } ]
  @UI.selectionField: [ {
    position: 50 
  } ]
  EndDate;
  
  @UI.identification: [ {
    position: 60 , 
    label: 'Booking Fee'
  } ]
  @UI.lineItem: [ {
    position: 60 , 
    label: 'Booking Fee'
  } ]
  @UI.selectionField: [ {
    position: 60 
  } ]
  BookingFee;
  
  @UI.identification: [ {
    position: 70 , 
    label: 'Total Price'
  } ]
  @UI.lineItem: [ {
    position: 70 , 
    label: 'Total Price'
  } ]
  @UI.selectionField: [ {
    position: 70 
  } ]
  TotalPrice;
  
  @UI.identification: [ {
    position: 80 , 
    label: 'Currency Code'
  } ]
  @UI.lineItem: [ {
    position: 80 , 
    label: 'Currency Code'
  } ]
  @UI.selectionField: [ {
    position: 80 
  } ]
  CurrencyCode;
  
  @UI.identification: [ {
    position: 90 , 
    label: 'Description'
  } ]
  @UI.lineItem: [ {
    position: 90 , 
    label: 'Description'
  } ]
  @UI.selectionField: [ {
    position: 90 
  } ]
  Description;
  
  @UI.identification: [ {
    position: 100 , 
    label: 'Overall Status'
  } ]
  @UI.lineItem: [ {
    position: 100 , 
    label: 'Overall Status'
  } ]
  @UI.selectionField: [ {
    position: 100 
  } ]
  OverallStatus;
  
  @UI.identification: [ {
    position: 110 , 
    label: 'Attachment'
  } ]
  @UI.lineItem: [ {
    position: 110 , 
    label: 'Attachment'
  } ]
  @UI.selectionField: [ {
    position: 110 
  } ]
  Attachment;
  
  @UI.identification: [ {
    position: 120 , 
    label: 'Mime Type'
  } ]
  @UI.lineItem: [ {
    position: 120 , 
    label: 'Mime Type'
  } ]
  @UI.selectionField: [ {
    position: 120 
  } ]
  MimeType;
  
  @UI.identification: [ {
    position: 130 , 
    label: 'Filename'
  } ]
  @UI.lineItem: [ {
    position: 130 , 
    label: 'Filename'
  } ]
  @UI.selectionField: [ {
    position: 130 
  } ]
  FileName;
  
  @UI.identification: [ {
    position: 140 , 
    label: 'Created By'
  } ]
  @UI.lineItem: [ {
    position: 140 , 
    label: 'Created By'
  } ]
  @UI.selectionField: [ {
    position: 140 
  } ]
  CreatedBy;
  
  @UI.identification: [ {
    position: 150 , 
    label: 'Created On'
  } ]
  @UI.lineItem: [ {
    position: 150 , 
    label: 'Created On'
  } ]
  @UI.selectionField: [ {
    position: 150 
  } ]
  CreatedAt;
  
  @UI.identification: [ {
    position: 160 , 
    label: 'Changed By'
  } ]
  @UI.lineItem: [ {
    position: 160 , 
    label: 'Changed By'
  } ]
  @UI.selectionField: [ {
    position: 160 
  } ]
  LocalLastChangedBy;
  
  @UI.identification: [ {
    position: 170 , 
    label: 'Changed On'
  } ]
  @UI.lineItem: [ {
    position: 170 , 
    label: 'Changed On'
  } ]
  @UI.selectionField: [ {
    position: 170 
  } ]
  LocalLastChangedAt;
  
  @UI.identification: [ {
    position: 180 , 
    label: 'Changed On'
  } ]
  @UI.lineItem: [ {
    position: 180 , 
    label: 'Changed On'
  } ]
  @UI.selectionField: [ {
    position: 180 
  } ]
  LastChangedAt;
}



@AccessControl.authorizationCheck: #CHECK
@Metadata.allowExtensions: true
@EndUserText.label: '###GENERATED Core Data Service Entity'
define root view entity ZR_YNY_RAP_BOOK_T2
  as select from ZYNY_RAP_BOOK_T2
{
  key travel_id as TravelId,
  agency_id as AgencyId,
  customer_id as CustomerId,
  begin_date as BeginDate,
  end_date as EndDate,
  @Semantics.amount.currencyCode: 'CurrencyCode'
  booking_fee as BookingFee,
  @Semantics.amount.currencyCode: 'CurrencyCode'
  total_price as TotalPrice,
  currency_code as CurrencyCode,
  description as Description,
  overall_status as OverallStatus,
  attachment as Attachment,
  mime_type as MimeType,
  file_name as FileName,
  @Semantics.user.createdBy: true
  created_by as CreatedBy,
  @Semantics.systemDateTime.createdAt: true
  created_at as CreatedAt,
  @Semantics.user.localInstanceLastChangedBy: true
  local_last_changed_by as LocalLastChangedBy,
  @Semantics.systemDateTime.localInstanceLastChangedAt: true
  local_last_changed_at as LocalLastChangedAt,
  @Semantics.systemDateTime.lastChangedAt: true
  last_changed_at as LastChangedAt
  
}


@Metadata.allowExtensions: true
@EndUserText.label: '###GENERATED Core Data Service Entity'
@AccessControl.authorizationCheck: #CHECK
define root view entity ZC_YNY_RAP_BOOK_T2
  provider contract TRANSACTIONAL_QUERY
  as projection on ZR_YNY_RAP_BOOK_T2
{
  key TravelId,
  AgencyId,
  CustomerId,
  BeginDate,
  EndDate,
  BookingFee,
  TotalPrice,
  CurrencyCode,
  Description,
  OverallStatus,
  Attachment,
  MimeType,
  FileName,
  CreatedBy,
  CreatedAt,
  LocalLastChangedBy,
  LocalLastChangedAt,
  LastChangedAt
  
}


managed implementation in class ZBP_R_YNY_RAP_BOOK_T2 unique;
strict ( 2 );
with draft;
define behavior for ZR_YNY_RAP_BOOK_T2 alias ZrYnyRapBookT2
persistent table ZYNY_RAP_BOOK_T2
draft table ZYNY_RAP_BOOK_D
etag master LocalLastChangedAt
lock master total etag LastChangedAt
authorization master( global )

{
  field ( mandatory : create )
   TravelId;

  field ( readonly )
   CreatedBy,
   CreatedAt,
   LocalLastChangedBy,
   LocalLastChangedAt,
   LastChangedAt;

  field ( readonly : update )
   TravelId;


  create;
  update;
  delete;

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare;

  mapping for ZYNY_RAP_BOOK_T2
  {
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    Attachment = attachment;
    MimeType = mime_type;
    FileName = file_name;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LocalLastChangedBy = local_last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
    LastChangedAt = last_changed_at;
  }
}

projection implementation in class ZBP_C_YNY_RAP_BOOK_T2 unique;
strict ( 2 );
use draft;
define behavior for ZC_YNY_RAP_BOOK_T2 alias ZcYnyRapBookT2
use etag

{
  use create;
  use update;
  use delete;

  use action Edit;
  use action Activate;
  use action Discard;
  use action Resume;
  use action Prepare;
}

@EndUserText: {
  label: 'Service Definition for ZC_YNY_RAP_BOOK_T2'
}
@ObjectModel: {
  leadingEntity: {
    name: 'ZC_YNY_RAP_BOOK_T2'
  }
}
define service ZUI_YNY_RAP_BOOK_T2_O4 provider contracts odata_v4_ui {
  expose ZC_YNY_RAP_BOOK_T2;
}

managed implementation in class ZBP_R_YNY_RAP_BOOK_T2 unique;
strict ( 2 );
with draft;
define behavior for ZR_YNY_RAP_BOOK_T2 alias ZrYnyRapBookT2
persistent table zyny_rap_book_t2
draft table zyny_rap_book_d
etag master LocalLastChangedAt
lock master total etag LastChangedAt
authorization master ( global )
early numbering
{
  field ( readonly )
  TravelId;

  field ( readonly )
  CreatedBy,
  CreatedAt,
  LocalLastChangedBy,
  LocalLastChangedAt,
  LastChangedAt;

  create;
  update;
  delete;

  determination setStatusToOpen on modify { create; }

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare;

  mapping for zyny_rap_book_t2
    {
      TravelId           = travel_id;
      AgencyId           = agency_id;
      CustomerId         = customer_id;
      BeginDate          = begin_date;
      EndDate            = end_date;
      BookingFee         = booking_fee;
      TotalPrice         = total_price;
      CurrencyCode       = currency_code;
      Description        = description;
      OverallStatus      = overall_status;
      Attachment         = attachment;
      MimeType           = mime_type;
      FileName           = file_name;
      CreatedBy          = created_by;
      CreatedAt          = created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

CLASS lhc_zr_yny_rap_book_t2 DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    CONSTANTS:
      BEGIN OF travel_status,
        open     TYPE c LENGTH 1 VALUE 'O', "Open
        accepted TYPE c LENGTH 1 VALUE 'A', "Accepted
        rejected TYPE c LENGTH 1 VALUE 'X', "Rejected
      END OF travel_status.

    METHODS:
      get_global_authorizations FOR GLOBAL AUTHORIZATION
        IMPORTING
        REQUEST requested_authorizations FOR ZrYnyRapBookT2
        RESULT result,
      earlynumbering_create FOR NUMBERING
        IMPORTING entities FOR CREATE ZrYnyRapBookT2,
      setStatusToOpen FOR DETERMINE ON MODIFY
        IMPORTING keys FOR ZrYnyRapBookT2~setStatusToOpen.
ENDCLASS.

CLASS lhc_zr_yny_rap_book_t2 IMPLEMENTATION.
  METHOD get_global_authorizations.
  ENDMETHOD.
  METHOD earlynumbering_create.
    DATA:
      entity           TYPE STRUCTURE FOR CREATE zr_yny_rap_book_t2,
      travel_id_max    TYPE /dmo/travel_id,
      " change to abap_false if you get the ABAP Runtime error 'BEHAVIOR_ILLEGAL_STATEMENT'
      use_number_range TYPE abap_bool VALUE abap_false.

    "Ensure Travel ID is not set yet (idempotent)- must be checked when BO is draft-enabled
    LOOP AT entities INTO entity WHERE TravelID IS NOT INITIAL.
      APPEND CORRESPONDING #( entity ) TO mapped-zrynyrapbookt2.
    ENDLOOP.

    DATA(entities_wo_travelid) = entities.
    "Remove the entries with an existing Travel ID
    DELETE entities_wo_travelid WHERE TravelID IS NOT INITIAL.

    IF use_number_range = abap_true.
      "Get numbers
      TRY.
          cl_numberrange_runtime=>number_get(
            EXPORTING
              nr_range_nr       = '01'
              object            = '/DMO/TRV_M'
              quantity          = CONV #( lines( entities_wo_travelid ) )
            IMPORTING
              number            = DATA(number_range_key)
              returncode        = DATA(number_range_return_code)
              returned_quantity = DATA(number_range_returned_quantity)
          ).
        CATCH cx_number_ranges INTO DATA(lx_number_ranges).
          LOOP AT entities_wo_travelid INTO entity.
            APPEND VALUE #(  %cid      = entity-%cid
                             %key      = entity-%key
                             %is_draft = entity-%is_draft
                             %msg      = lx_number_ranges
                          ) TO reported-zrynyrapbookt2.
            APPEND VALUE #(  %cid      = entity-%cid
                             %key      = entity-%key
                             %is_draft = entity-%is_draft
                          ) TO failed-zrynyrapbookt2.
          ENDLOOP.
          EXIT.
      ENDTRY.

      "determine the first free travel ID from the number range
      travel_id_max = number_range_key - number_range_returned_quantity.
    ELSE.
      "determine the first free travel ID without number range
      "Get max travel ID from active table
      SELECT SINGLE FROM zyny_rap_book_t2 FIELDS MAX( travel_id ) AS travelID INTO @travel_id_max.
      "Get max travel ID from draft table
      SELECT SINGLE FROM zyny_rap_book_d FIELDS MAX( travelid ) INTO @DATA(max_travelid_draft).
      IF max_travelid_draft > travel_id_max.
        travel_id_max = max_travelid_draft.
      ENDIF.
    ENDIF.

    "Set Travel ID for new instances w/o ID
    LOOP AT entities_wo_travelid INTO entity.
      travel_id_max += 1.
      entity-TravelID = travel_id_max.

      APPEND VALUE #( %cid      = entity-%cid
                      %key      = entity-%key
                      %is_draft = entity-%is_draft
                    ) TO mapped-zrynyrapbookt2.
    ENDLOOP.

  ENDMETHOD.

  METHOD setStatusToOpen.
    "Read travel instances of the transferred keys
    READ ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
     ENTITY ZrYnyRapBookT2
       FIELDS ( OverallStatus )
       WITH CORRESPONDING #( keys )
     RESULT DATA(travels)
     FAILED DATA(read_failed).

    "If overall travel status is already set, do nothing, i.e. remove such instances
    DELETE travels WHERE OverallStatus IS NOT INITIAL.
    CHECK travels IS NOT INITIAL.

    "else set overall travel status to open ('O')
    MODIFY ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
      ENTITY ZrYnyRapBookT2
        UPDATE SET FIELDS
        WITH VALUE #( FOR travel IN travels ( %tky    = travel-%tky
                                              OverallStatus = travel_status-open ) )
    REPORTED DATA(update_reported).

    "Set the changing parameter
    reported = CORRESPONDING #( DEEP update_reported ).

  ENDMETHOD.

ENDCLASS.

managed implementation in class ZBP_R_YNY_RAP_BOOK_T2 unique;
strict ( 2 );
with draft;
define behavior for ZR_YNY_RAP_BOOK_T2 alias ZrYnyRapBookT2
persistent table zyny_rap_book_t2
draft table zyny_rap_book_d
etag master LocalLastChangedAt
lock master total etag LastChangedAt
authorization master ( global )
early numbering
{
  field ( mandatory )
  CustomerID,
  BeginDate,
  EndDate;

  field ( readonly )
  TravelId;

  field ( readonly )
  CreatedBy,
  CreatedAt,
  LocalLastChangedBy,
  LocalLastChangedAt,
  LastChangedAt;

  create;
  update;
  delete;

  determination setStatusToOpen on modify { create; }

  validation validateCustomer on save { create; field CustomerID; }
  validation validateDates on save { create; field BeginDate, EndDate; }

  draft action Activate optimized;
  draft action Discard;
  draft action Edit;
  draft action Resume;
  draft determine action Prepare
  {
    validation validateCustomer;
    validation validateDates; }


  mapping for zyny_rap_book_t2
    {
      TravelId           = travel_id;
      AgencyId           = agency_id;
      CustomerId         = customer_id;
      BeginDate          = begin_date;
      EndDate            = end_date;
      BookingFee         = booking_fee;
      TotalPrice         = total_price;
      CurrencyCode       = currency_code;
      Description        = description;
      OverallStatus      = overall_status;
      Attachment         = attachment;
      MimeType           = mime_type;
      FileName           = file_name;
      CreatedBy          = created_by;
      CreatedAt          = created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

CLASS lhc_zr_yny_rap_book_t2 DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    CONSTANTS:
      BEGIN OF travel_status,
        open     TYPE c LENGTH 1 VALUE 'O', "Open
        accepted TYPE c LENGTH 1 VALUE 'A', "Accepted
        rejected TYPE c LENGTH 1 VALUE 'X', "Rejected
      END OF travel_status.

    METHODS:
      get_global_authorizations FOR GLOBAL AUTHORIZATION
        IMPORTING
        REQUEST requested_authorizations FOR ZrYnyRapBookT2
        RESULT result,
      earlynumbering_create FOR NUMBERING
        IMPORTING entities FOR CREATE ZrYnyRapBookT2,
      setStatusToOpen FOR DETERMINE ON MODIFY
        IMPORTING keys FOR ZrYnyRapBookT2~setStatusToOpen,
      validateCustomer FOR VALIDATE ON SAVE
            IMPORTING keys FOR ZrYnyRapBookT2~validateCustomer.

          METHODS validateDates FOR VALIDATE ON SAVE
            IMPORTING keys FOR ZrYnyRapBookT2~validateDates.
ENDCLASS.

CLASS lhc_zr_yny_rap_book_t2 IMPLEMENTATION.
  METHOD get_global_authorizations.
  ENDMETHOD.
  METHOD earlynumbering_create.
    DATA:
      entity           TYPE STRUCTURE FOR CREATE zr_yny_rap_book_t2,
      travel_id_max    TYPE /dmo/travel_id,
      " change to abap_false if you get the ABAP Runtime error 'BEHAVIOR_ILLEGAL_STATEMENT'
      use_number_range TYPE abap_bool VALUE abap_false.

    "Ensure Travel ID is not set yet (idempotent)- must be checked when BO is draft-enabled
    LOOP AT entities INTO entity WHERE TravelID IS NOT INITIAL.
      APPEND CORRESPONDING #( entity ) TO mapped-zrynyrapbookt2.
    ENDLOOP.

    DATA(entities_wo_travelid) = entities.
    "Remove the entries with an existing Travel ID
    DELETE entities_wo_travelid WHERE TravelID IS NOT INITIAL.

    IF use_number_range = abap_true.
      "Get numbers
      TRY.
          cl_numberrange_runtime=>number_get(
            EXPORTING
              nr_range_nr       = '01'
              object            = '/DMO/TRV_M'
              quantity          = CONV #( lines( entities_wo_travelid ) )
            IMPORTING
              number            = DATA(number_range_key)
              returncode        = DATA(number_range_return_code)
              returned_quantity = DATA(number_range_returned_quantity)
          ).
        CATCH cx_number_ranges INTO DATA(lx_number_ranges).
          LOOP AT entities_wo_travelid INTO entity.
            APPEND VALUE #(  %cid      = entity-%cid
                             %key      = entity-%key
                             %is_draft = entity-%is_draft
                             %msg      = lx_number_ranges
                          ) TO reported-zrynyrapbookt2.
            APPEND VALUE #(  %cid      = entity-%cid
                             %key      = entity-%key
                             %is_draft = entity-%is_draft
                          ) TO failed-zrynyrapbookt2.
          ENDLOOP.
          EXIT.
      ENDTRY.

      "determine the first free travel ID from the number range
      travel_id_max = number_range_key - number_range_returned_quantity.
    ELSE.
      "determine the first free travel ID without number range
      "Get max travel ID from active table
      SELECT SINGLE FROM zyny_rap_book_t2 FIELDS MAX( travel_id ) AS travelID INTO @travel_id_max.
      "Get max travel ID from draft table
      SELECT SINGLE FROM zyny_rap_book_d FIELDS MAX( travelid ) INTO @DATA(max_travelid_draft).
      IF max_travelid_draft > travel_id_max.
        travel_id_max = max_travelid_draft.
      ENDIF.
    ENDIF.

    "Set Travel ID for new instances w/o ID
    LOOP AT entities_wo_travelid INTO entity.
      travel_id_max += 1.
      entity-TravelID = travel_id_max.

      APPEND VALUE #( %cid      = entity-%cid
                      %key      = entity-%key
                      %is_draft = entity-%is_draft
                    ) TO mapped-zrynyrapbookt2.
    ENDLOOP.

  ENDMETHOD.

  METHOD setStatusToOpen.
    "Read travel instances of the transferred keys
    READ ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
     ENTITY ZrYnyRapBookT2
       FIELDS ( OverallStatus )
       WITH CORRESPONDING #( keys )
     RESULT DATA(travels)
     FAILED DATA(read_failed).

    "If overall travel status is already set, do nothing, i.e. remove such instances
    DELETE travels WHERE OverallStatus IS NOT INITIAL.
    CHECK travels IS NOT INITIAL.

    "else set overall travel status to open ('O')
    MODIFY ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
      ENTITY ZrYnyRapBookT2
        UPDATE SET FIELDS
        WITH VALUE #( FOR travel IN travels ( %tky    = travel-%tky
                                              OverallStatus = travel_status-open ) )
    REPORTED DATA(update_reported).

    "Set the changing parameter
    reported = CORRESPONDING #( DEEP update_reported ).

  ENDMETHOD.

**********************************************************************
* Validation: Check the validity of the entered customer data
**********************************************************************
  METHOD validateCustomer.
      "read relevant travel instance data
      READ ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
      ENTITY ZrYnyRapBookT2
       FIELDS ( CustomerID )
       WITH CORRESPONDING #( keys )
      RESULT DATA(travels).

      DATA customers TYPE SORTED TABLE OF /dmo/customer WITH UNIQUE KEY customer_id.

      "optimization of DB select: extract distinct non-initial customer IDs
      customers = CORRESPONDING #( travels DISCARDING DUPLICATES MAPPING customer_id = customerID EXCEPT * ).
      DELETE customers WHERE customer_id IS INITIAL.
      IF customers IS NOT INITIAL.

        "check if customer ID exists
        SELECT FROM /dmo/customer FIELDS customer_id
                                  FOR ALL ENTRIES IN @customers
                                  WHERE customer_id = @customers-customer_id
          INTO TABLE @DATA(valid_customers).
      ENDIF.

      "raise msg for non existing and initial customer id
      LOOP AT travels INTO DATA(travel).

        APPEND VALUE #(  %tky                 = travel-%tky
                         %state_area          = 'VALIDATE_CUSTOMER'
                       ) TO reported-zrynyrapbookt2.

        IF travel-CustomerID IS  INITIAL.
          APPEND VALUE #( %tky = travel-%tky ) TO failed-zrynyrapbookt2.

          APPEND VALUE #( %tky                = travel-%tky
                          %state_area         = 'VALIDATE_CUSTOMER'
                          %msg                = NEW /dmo/cm_flight_messages(
                                                                  textid   = /dmo/cm_flight_messages=>enter_customer_id
                                                                  severity = if_abap_behv_message=>severity-error )
                          %element-CustomerID = if_abap_behv=>mk-on
                        ) TO reported-zrynyrapbookt2.

        ELSEIF travel-CustomerID IS NOT INITIAL AND NOT line_exists( valid_customers[ customer_id = travel-CustomerID ] ).
          APPEND VALUE #(  %tky = travel-%tky ) TO failed-zrynyrapbookt2.

          APPEND VALUE #(  %tky                = travel-%tky
                           %state_area         = 'VALIDATE_CUSTOMER'
                           %msg                = NEW /dmo/cm_flight_messages(
                                                                  customer_id = travel-customerid
                                                                  textid      = /dmo/cm_flight_messages=>customer_unkown
                                                                  severity    = if_abap_behv_message=>severity-error )
                           %element-CustomerID = if_abap_behv=>mk-on
                        ) TO reported-zrynyrapbookt2.
        ENDIF.

      ENDLOOP.
  ENDMETHOD.

**********************************************************************
* Validation: Check the validity of begin and end dates
**********************************************************************
  METHOD validateDates.

    READ ENTITIES OF ZR_YNY_RAP_BOOK_T2 IN LOCAL MODE
      ENTITY ZrYnyRapBookT2
        FIELDS (  BeginDate EndDate TravelID )
        WITH CORRESPONDING #( keys )
      RESULT DATA(travels).

    LOOP AT travels INTO DATA(travel).

      APPEND VALUE #(  %tky               = travel-%tky
                       %state_area        = 'VALIDATE_DATES' ) TO reported-zrynyrapbookt2.

      IF travel-BeginDate IS INITIAL.
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zrynyrapbookt2.

        APPEND VALUE #( %tky               = travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg              = NEW /dmo/cm_flight_messages(
                                                                textid   = /dmo/cm_flight_messages=>enter_begin_date
                                                                severity = if_abap_behv_message=>severity-error )
                      %element-BeginDate = if_abap_behv=>mk-on ) TO reported-zrynyrapbookt2.
      ENDIF.
      IF travel-BeginDate < cl_abap_context_info=>get_system_date( ) AND travel-BeginDate IS NOT INITIAL.
        APPEND VALUE #( %tky               = travel-%tky ) TO failed-zrynyrapbookt2.

        APPEND VALUE #( %tky               = travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg              = NEW /dmo/cm_flight_messages(
                                                                begin_date = travel-BeginDate
                                                                textid     = /dmo/cm_flight_messages=>begin_date_on_or_bef_sysdate
                                                                severity   = if_abap_behv_message=>severity-error )
                        %element-BeginDate = if_abap_behv=>mk-on ) TO reported-zrynyrapbookt2.
      ENDIF.
      IF travel-EndDate IS INITIAL.
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zrynyrapbookt2.

        APPEND VALUE #( %tky               = travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                         %msg                = NEW /dmo/cm_flight_messages(
                                                                textid   = /dmo/cm_flight_messages=>enter_end_date
                                                               severity = if_abap_behv_message=>severity-error )
                        %element-EndDate   = if_abap_behv=>mk-on ) TO reported-zrynyrapbookt2.
      ENDIF.
      IF travel-EndDate < travel-BeginDate AND travel-BeginDate IS NOT INITIAL
                                           AND travel-EndDate IS NOT INITIAL.
        APPEND VALUE #( %tky = travel-%tky ) TO failed-zrynyrapbookt2.

        APPEND VALUE #( %tky               = travel-%tky
                        %state_area        = 'VALIDATE_DATES'
                        %msg               = NEW /dmo/cm_flight_messages(
                                                                textid     = /dmo/cm_flight_messages=>begin_date_bef_end_date
                                                                begin_date = travel-BeginDate
                                                                end_date   = travel-EndDate
                                                                severity   = if_abap_behv_message=>severity-error )
                        %element-BeginDate = if_abap_behv=>mk-on
                        %element-EndDate   = if_abap_behv=>mk-on ) TO reported-zrynyrapbookt2.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.